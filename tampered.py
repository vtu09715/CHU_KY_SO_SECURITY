# tamper_preserve_signature.py
# Phi√™n b·∫£n kh√¥ng t·∫°o file t·∫°m overlay_temp.pdf ‚Äì overlay th·ª±c hi·ªán trong b·ªô nh·ªõ

from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import mm
from reportlab.lib.colors import Color
from pikepdf import Pdf
from pathlib import Path
from datetime import datetime
from io import BytesIO
import sys

# === C·∫•u h√¨nh ===
SIGNED_PDF = Path(r"D:\BAITAP2\pdf\signed.pdf")         # File PDF ƒë√£ k√Ω
TAMPERED_PDF = Path(r"D:\BAITAP2\pdf\tampered.pdf")     # File PDF ƒë·∫ßu ra
SIGN_IMAGE = Path("chuky.jpg")                          # ·∫¢nh ch·ªØ k√Ω c√° nh√¢n (t√πy ch·ªçn)

# === Ki·ªÉm tra file ngu·ªìn ===
if not SIGNED_PDF.exists():
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file ngu·ªìn: {SIGNED_PDF}")
    sys.exit(1)

# === ƒêƒÉng k√Ω font ===
FONT_PATH = Path("C:/Windows/Fonts/arial.ttf")
FONT_NAME = "ArialUnicode"
if FONT_PATH.exists():
    try:
        pdfmetrics.registerFont(TTFont(FONT_NAME, str(FONT_PATH)))
    except Exception:
        FONT_NAME = "Helvetica"
else:
    FONT_NAME = "Helvetica"

# === L·∫•y k√≠ch th∆∞·ªõc trang ===
with Pdf.open(str(SIGNED_PDF)) as base_check:
    mb = base_check.pages[0].MediaBox
    llx, lly, urx, ury = [float(x) for x in mb]
    page_w = urx - llx
    page_h = ury - lly

# === T·∫°o overlay tr·ª±c ti·∫øp trong b·ªô nh·ªõ ===
overlay_buffer = BytesIO()
c = canvas.Canvas(overlay_buffer, pagesize=(page_w, page_h))
c.setFont(FONT_NAME, 14)
try:
    c.setFillAlpha(0.3)  # ch·ªØ m·ªù, kh√¥ng che n·ªôi dung
except Exception:
    pass

# M√†u ƒë·ªè nh·∫°t c·∫£nh b√°o
c.setFillColor(Color(1, 0, 0, alpha=0.3))

# Th√™m ch·ªØ c·∫£nh b√°o m·ªù
x = 100
y = page_h - 100
c.drawString(x, y, "‚ö† ƒê√¢y l√† b·∫£n sao c√≥ ch·ªânh s·ª≠a (Demo) ‚ö†")

# Th√™m timestamp nh·ªè
c.setFont(FONT_NAME, 9)
ts = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
c.drawRightString(page_w - 15*mm, 8*mm, f"Modified on: {ts}")

# (T√πy ch·ªçn) th√™m ·∫£nh ch·ªØ k√Ω n·∫øu c√≥
if SIGN_IMAGE.exists():
    c.drawImage(str(SIGN_IMAGE), x=page_w - 60*mm, y=15*mm, width=40*mm, height=20*mm, mask='auto')

c.save()
overlay_buffer.seek(0)

print("‚úÖ Overlay t·∫°m ƒë∆∞·ª£c t·∫°o trong b·ªô nh·ªõ, kh√¥ng ghi ra ƒëƒ©a.")

# === Gh√©p overlay v·ªõi PDF g·ªëc ===
with Pdf.open(str(SIGNED_PDF)) as base:
    with Pdf.open(overlay_buffer) as overlay:
        for i, page in enumerate(base.pages):
            page.add_overlay(overlay.pages[0])
            print(f"  ‚Üí ƒê√£ √°p d·ª•ng overlay l√™n trang {i+1}")

        base.save(str(TAMPERED_PDF))
        print(f"üíæ ƒê√£ l∆∞u file ch·ªânh s·ª≠a t·∫°i: {TAMPERED_PDF}")

print("‚úÖ Ho√†n t·∫•t, kh√¥ng t·∫°o file t·∫°m overlay_temp.pdf n√†o.")
